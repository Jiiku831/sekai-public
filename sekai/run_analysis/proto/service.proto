syntax = "proto3";

package sekai.run_analysis;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

message Status {
  optional int32 code = 1;
  optional string msg = 2;
}

message DeckCard {
  optional int32 card_id      = 1;
  optional int32 master_rank  = 2;
  optional bool trained_state = 3;
}

message ValueDist {
  optional float mean  = 1;
  optional float stdev = 2;
}

message ConfidenceInterval {
  optional float value       = 1;
  optional float lower_bound = 2;
  optional float upper_bound = 3;
  optional float confidence  = 4;
}

message AnalyzeTeamRequest {
  optional int32 event_id   = 1;
  repeated DeckCard cards   = 2;
  optional int32 team_power = 3;
}

message AnalyzeTeamResponse {
  optional Status status = 1;

  // The main team event bonus.
  //
  // Note that for WL events, this does not include the support team bonus.
  optional float event_bonus = 2;

  // Potential skill range for this team.
  message SkillDetails {
    repeated int32 skill_lower_bounds      = 1;
    repeated int32 skill_upper_bounds      = 2;
    optional float skill_value_lower_bound = 3;
    optional float skill_value_upper_bound = 4;
  }
  optional SkillDetails skill_details = 3;
}

message AnalyzeGraphRequest {
  repeated int64 timestamps = 1;
  repeated int32 points     = 2;
}

message AnalyzeGraphResponse {
  optional Status status                     = 1;

  google.protobuf.Duration observed_duration = 2;
  google.protobuf.Duration total_uptime      = 3;
  google.protobuf.Duration total_downtime    = 4;

  message Segment {
    optional Status status     = 1;
    optional bool is_confident = 2;

    // Absolute start and end timestamps of the segment.
    optional google.protobuf.Timestamp start   = 3;
    optional google.protobuf.Timestamp end     = 4;

    optional ConfidenceInterval games_per_hour = 5;
    optional ConfidenceInterval ep_per_game    = 6;
  }
  repeated Segment active_segments = 5;
}

message BatchAnalyzeGraphRequest { repeated AnalyzeGraphRequest requests = 1; }

message BatchAnalyzeGraphResponse {
  optional Status status                  = 1;
  repeated AnalyzeGraphResponse responses = 2;
}
